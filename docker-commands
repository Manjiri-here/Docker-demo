Docker Commands that comes in handy-

$ docker version                   # gives docker client and docker server engine information and versions.
$ docker ps                        # used to check the containers running on docker. It shows fields- CONTAINER ID, IMAGE(image from which it is built), COMMAND(commands it executes when starting the container), CREATED, STATUS(is it running or exited), PORTS, NAMES(of container) 
# docker ps -a                     # to check all contaners both running and not running ones
$ docker images                    # used to check the images available on the host
$ docker run redis                 # to run a container using an image. It is 'redis' image here.
$ docker stop <container-id>       # to stop a running container
$ docker rm <container ids's>     # to delete/remove the containers, you an add as many container ids to be deleted. The container first needs to be stopped before deleting
$ docker rmi <image name>          # to delete image
$ docker rm -f $(docker ps -aq)    # to stop and delete all containers running on the host (running and not-running ones. -f = force remove, -a = all, -q = quietly means only container ids will be listed)
$ docker pull <image link>         # to pull the image from docker/any hub
$ docker run -d --name <the app name you want to give> <image to create container from, -d = detached mode, you run container in detached mode means in background so that it you can continue doing other things>
ex: docker run -d --name webapp nginx:1.14-alpine
$ docker run -p 38282:8080 --name blue-app -d kodekloud/simple-webapp:blue     $ -p is for mapping the host-port:container-port , naming the container as blue-app and -d is to run container in detached mode, so that your terminal is free to run other commands.
$ docker inspect <container-id>    # we see env variables set for a container on docker inspect command. And also a powerful command to know about container or any object details in docker.
$ docker run kodekloud/simple-webapp --name=blue-app -p 38282-8080 -e APP_COLOR=blue         #here we set environment variable APP_COLOR to blue using the -e flag
$ docker run --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql       # using this we set the password for environment. We get this env variable from docker hub
$ docker image prune  # deletes all images which does not have any contaner running on them(dangling images). Be caustious while using this command
$ docker rmi -f $ (docker images -aq)
$ docker exec -it <container-name> /bin/bash  # using this command we login to a container means we actually get logged into it like ssh session
